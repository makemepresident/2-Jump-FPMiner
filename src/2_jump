import random # testing only

# Give some data file with more than x_lines, read into list line-by-line
# Otherwise, read entire file into memory
n = 100 # test_data length (hardcoded for testing)
m = 4 # pattern length (hardcoded for testing)
chars = {0: 'a', 1: 'c', 2: 'g', 3: 't'}
inv_chars = {i: j for j, i in chars.items()} # reversed char dictionary
random.seed(435377)
test_data = [chars.get(random.randrange(0, 4)) for x in range(n)]
test_pattern = ['a', 't', 't', 'g']

input_data = test_data
pattern = test_pattern # for when test data is removed
# index_table = [[] * n]

def gen_index_table():
    # Generate index table based on page 6 of the reference paper
    return

def two_jump():
    firstLet = pattern[0]
    i, j, start_index, compare, counter = 0, 0, 0, 0, 0
    flag = True
    index_table = gen_index_table()
    start_index = index_table[firstLet][i]
    while n - start_index > m:
        print(start_index)
        while j < m:
            if m - j == 1:
                if input_data[start_index + j] != pattern[j]:
                    compare += 1
                    flag = False
                    break
                input_two = input_data[start_index + j] + input_data[start_index + j + 1]
                pattern_two = pattern[j] + pattern[j + 1]
                compare += 1
                if input_two != pattern_two:
                    flag = False
                    break
                else:
                    compare += 1
            if input_data[start_index + j] != pattern[j] or input_data[start_index + j + 1] != pattern[j + 1]:
                flag = False
                break
            if flag is True:
                counter += 1
            else:
                flag = True
                j = 0
        i += 1
        # print(i)
        start_index = index_table[i][inv_chars.get(test_pattern[0])]
    return counter

print(two_jump())